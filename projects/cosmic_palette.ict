{
  "notes": "/* empty */",
  "libs": {
    "canvas": {},
    "akatemplate": {
      "csscss": "body {\n    background: #100222;\n}"
    },
    "tween": {}
  },
  "graphs": [
    {
      "name": "lv_01_01",
      "untill": 0,
      "grid": [
        1,
        1
      ],
      "axis": [
        0,
        0
      ],
      "marginx": 0,
      "marginy": 0,
      "imgWidth": 5,
      "imgHeight": 5,
      "width": 5,
      "height": 5,
      "offx": 0,
      "offy": 0,
      "origname": "i1.png",
      "shape": "rect",
      "left": 0,
      "right": 5,
      "top": 0,
      "bottom": 5,
      "lastmod": 1524895845252
    },
    {
      "name": "lv_01_02",
      "untill": 0,
      "grid": [
        1,
        1
      ],
      "axis": [
        0,
        0
      ],
      "marginx": 0,
      "marginy": 0,
      "imgWidth": 5,
      "imgHeight": 5,
      "width": 5,
      "height": 5,
      "offx": 0,
      "offy": 0,
      "origname": "i2.png",
      "shape": "rect",
      "left": 0,
      "right": 5,
      "top": 0,
      "bottom": 5,
      "lastmod": 1524898630793
    },
    {
      "name": "lv_01_03",
      "untill": 0,
      "grid": [
        1,
        1
      ],
      "axis": [
        0,
        0
      ],
      "marginx": 0,
      "marginy": 0,
      "imgWidth": 5,
      "imgHeight": 5,
      "width": 5,
      "height": 5,
      "offx": 0,
      "offy": 0,
      "origname": "i3.png",
      "shape": "rect",
      "left": 0,
      "right": 5,
      "top": 0,
      "bottom": 5
    },
    {
      "name": "EnlightLogo",
      "untill": 0,
      "grid": [
        1,
        1
      ],
      "axis": [
        339,
        109
      ],
      "marginx": 0,
      "marginy": 0,
      "imgWidth": 678,
      "imgHeight": 218,
      "width": 678,
      "height": 218,
      "offx": 0,
      "offy": 0,
      "origname": "i4.png",
      "shape": "rect",
      "left": 339,
      "right": 339,
      "top": 109,
      "bottom": 109,
      "lastmod": 1524906049989
    }
  ],
  "types": [
    {
      "name": "Tile",
      "depth": 0,
      "oncreate": "",
      "onstep": "if (ct.mouse.pressed && !this.locked && !this.moving) {\n    if (ct.u.prect(ct.mouse.x, ct.mouse.y, [this.x, this.y, this.x + this.width, this.y + this.height])) {\n        if (ct.room.selected && !ct.room.selected.moving) {\n            if (ct.room.selected === this) {\n                ct.room.selected = null;\n            } else {\n                this.moving = true;\n                var secondTile = ct.room.selected;\n                this.depth = 1;\n                secondTile.depth = 1;\n                secondTile.moving = true;\n                ct.tween.add({\n                    obj: this,\n                    fields: {\n                        x: ct.room.selected.x,\n                        y: ct.room.selected.y\n                    },\n                    duration: 250,\n                    curve: ct.tween.easeOutCubic\n                }).then(() => {\n                    this.depth = 0;\n                    this.moving = false;\n                });\n                ct.tween.add({\n                    obj: ct.room.selected,\n                    fields: {\n                        x: this.x,\n                        y: this.y\n                    },\n                    duration: 250,\n                    curve: ct.tween.easeOutCubic\n                }).then(() => {\n                    secondTile.depth = 0;\n                    secondTile.moving = false;\n                });\n                ct.mouse.clear();\n                ct.room.selected = null;\n                ct.room.moves ++;\n            }\n        } else {\n            ct.room.selected = this;\n        }\n    }\n}",
      "ondraw": "ct.x.fillStyle = this.color;\nct.draw.rectangle(this.x, this.y, this.width, this.height);\n\nif (ct.room.selected === this) {\n    ct.styles.set('Dot');\n    ct.x.fillStyle = '#fff';\n    ct.draw.circle(this.x + this.width / 2, this.y + this.height / 2, 5);\n    ct.styles.reset();\n}\n\nif (this.locked) {\n    ct.styles.set('Dot');\n    ct.draw.circle(this.x + this.width / 2, this.y + this.height / 2, 5);\n    ct.styles.reset();\n}\n",
      "ondestroy": "",
      "uid": 1,
      "graph": -1
    },
    {
      "name": "LogoSwitcher",
      "depth": 0,
      "oncreate": "this.transform = true;\nthis.ta = 0;\n\nct.tween.add({\n    obj: this,\n    fields: {\n        ta: 1\n    },\n    duration: 1000\n})\n.then(() => ct.tween.wait(1000))\n.then(() => ct.tween.add({\n    obj: this,\n    fields: {\n        ta: 0\n    },\n    duration: 1000\n}))\n.then(() => {\n    ct.rooms.switch('Main');\n});",
      "onstep": "",
      "ondraw": "ct.draw(this);",
      "ondestroy": "",
      "uid": 2,
      "graph": "i4.png"
    }
  ],
  "sounds": [],
  "styles": [
    {
      "name": "Dot",
      "uid": 1,
      "origname": "s1",
      "fill": {
        "type": "0",
        "color": "#000C2B"
      },
      "shadow": {
        "color": "rgba(0,0,0,0.22)",
        "x": 0,
        "y": 4,
        "blur": 4
      },
      "lastmod": 1524906500693,
      "font": {
        "family": "sans-serif",
        "size": 12,
        "weight": 400,
        "italic": false
      }
    }
  ],
  "rooms": [
    {
      "name": "Main",
      "oncreate": "/**\n * Shuffles array in place. ES6 version\n * @param {Array} a items An array containing the items.\n */\nvar shuffle = function(a) {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n}\n\nthis.level = 'lv_01_01';\nthis.graph = ct.res.graphs[this.level];\nthis.moves = 0;\nthis.startTime = new Date();\n\nthis.canvas = ct.canvas.create(this.graph.width, this.graph.height);\nct.canvas.drawTile(this.canvas, this.level, 0, 0, 0);\n\nvar tiles = this.canvas.x.getImageData(0, 0, this.canvas.width, this.canvas.height).data;\n\nvar gridX = ct.width / this.canvas.width,\n    gridY = ct.height / this.canvas.height,\n    tilesX = this.canvas.width,\n    tilesY = this.canvas.height;\n\nvar locked = [0, tilesX - 1, tilesX * (tilesY - 1), tilesX * tilesY - 1];\n\nfor (var i = 0, l = tiles.length; i < l; i += 4) {\n    var color = `rgb(${tiles[i]}, ${tiles[i+1]}, ${tiles[i+2]})`;\n    var tile = ct.types.copy('Tile', ((i / 4) % tilesX) * gridX, (~~((i / 4) / tilesY)) * gridY);\n    tile.color = color;\n    tile.colorRaw = [tiles[i], tiles[i+1], tiles[i+2]];\n    tile.locked = locked.indexOf(i / 4) !== -1;\n    tile.width = gridX;\n    tile.height = gridY;\n}\n\nvar toShuffle = ct.types.list['Tile'].filter(tile => !tile.locked),\n    positions = [];\ntoShuffle.forEach(tile => positions.push([tile.x, tile.y]));\n\nshuffle(positions);\n\nfor (var i = 0, l = toShuffle.length; i < l; i++) {\n    var tile = toShuffle[i];\n    tile.x = positions[i][0];\n    tile.y = positions[i][1];\n}",
      "onstep": "",
      "ondraw": "",
      "onleave": "",
      "width": 1080,
      "height": 1080,
      "backgrounds": [],
      "layers": [],
      "uid": 1,
      "grid": 64,
      "lastmod": 1524906025654
    },
    {
      "name": "Intro",
      "oncreate": "",
      "onstep": "",
      "ondraw": "",
      "onleave": "",
      "width": 1080,
      "height": 1080,
      "backgrounds": [],
      "layers": [
        {
          "depth": 0,
          "copies": [
            {
              "x": 512,
              "y": 512,
              "uid": 2
            }
          ]
        }
      ],
      "uid": 2,
      "grid": 64,
      "lastmod": 1524906082893
    }
  ],
  "graphtick": 4,
  "soundtick": 0,
  "roomtick": 2,
  "typetick": 2,
  "styletick": 1,
  "starting": 0,
  "settings": {
    "minifyhtmlcss": false,
    "minifyjs": false,
    "title": "Cosmic Palettes",
    "author": "Cosmo Myzrail Gorynych",
    "site": "https://comigogames.ru/",
    "fps": 60
  },
  "palette": [],
  "startroom": 2
}
